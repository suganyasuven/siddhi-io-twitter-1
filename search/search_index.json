{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi-io-twitter\n\n\nThe \nsiddhi-io-twitter extension\n is an extension to \nSiddhi\n which is used to publish event data from Twitter App. It supports json format.\n\n\nPrerequisites\n\n\n\n\nGo to the https://apps.twitter.com/ and create new App\n\n\nSelect the app created in step 1 and go to \u201cpermission\u201d tab and select \u201cread\nwrite\u201d permission\n\n\nGo to the \u201ckeys and access tokens\u201d tab and generate new access token\n\n\nCollect following value from \u201ckeys and access tokens tab\"\n\n\nConsumer key\n\n\nConsumer Secret\n\n\nAccess Token\n\n\nAccess Token Secret\n\n\nUpdate the parameter values for the extension with these values.\n\n\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.io.twitter\n/groupId\n\n        \nartifactId\nsiddhi-io-twitter\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nTwitter\n \n(\n(Source)\n)\nTwitter Source provides the functionality for user to feed data to siddhi from Twitter API. Only json is supported by twitter source.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n.\n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi IO Twitter"
        }, 
        {
            "location": "/#siddhi-io-twitter", 
            "text": "The  siddhi-io-twitter extension  is an extension to  Siddhi  which is used to publish event data from Twitter App. It supports json format.", 
            "title": "Siddhi-io-twitter"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "Go to the https://apps.twitter.com/ and create new App  Select the app created in step 1 and go to \u201cpermission\u201d tab and select \u201cread write\u201d permission  Go to the \u201ckeys and access tokens\u201d tab and generate new access token  Collect following value from \u201ckeys and access tokens tab\"  Consumer key  Consumer Secret  Access Token  Access Token Secret  Update the parameter values for the extension with these values.   Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.io.twitter /groupId \n         artifactId siddhi-io-twitter /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "Twitter   ( (Source) ) Twitter Source provides the functionality for user to feed data to siddhi from Twitter API. Only json is supported by twitter source.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/", 
            "text": "API Docs - v1.0.0-SNAPSHOT\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe twitter source receives the events from a twitter App. \n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nConsumer key is the API key to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nConsumer secret is the API secret to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nAccess token is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nAccess token secret is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThere are two possible values for mode. \n1. Streaming - Retrieves real time tweets, \n2. TwitterPoller - Retrieves historical tweets within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nFilters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the \u201ctop tweets\u201d filter the service already offers in its on-site search function. Values will be one of either none, low, or medium.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nFilters the tweets that include the given keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nFilters the tweets that is tweeted by the given user ids\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nFilters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nFilters tweets in the given language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nFilters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators. \nFor example : '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nReturns specified number of tweets per page, up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nReturns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either \u201d mi \u201d (miles) or \u201d km \u201d (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nReturns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:\n mixed : Include both popular and recent results in the response.\n recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nReturns tweets with an tweet ID less than (that is, older than) or equal to the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nReturns tweets with an tweet ID greater than (that is, more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nReturns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nSpecifies the period of time (in seconds) to poll tweets periodically\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "1.0.0-SNAPSHOT"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#api-docs-v100-snapshot", 
            "text": "", 
            "title": "API Docs - v1.0.0-SNAPSHOT"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.0-SNAPSHOT/#twitter-source", 
            "text": "The twitter source receives the events from a twitter App.   Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         Consumer key is the API key to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         Consumer secret is the API secret to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         Access token is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         Access token secret is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         There are two possible values for mode.  1. Streaming - Retrieves real time tweets,  2. TwitterPoller - Retrieves historical tweets within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         Filters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the \u201ctop tweets\u201d filter the service already offers in its on-site search function. Values will be one of either none, low, or medium. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         Filters the tweets that include the given keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         Filters the tweets that is tweeted by the given user ids \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         Filters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970 \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         Filters tweets in the given language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         Filters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators.  For example : '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         Returns specified number of tweets per page, up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either \u201d mi \u201d (miles) or \u201d km \u201d (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         Returns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:  mixed : Include both popular and recent results in the response.  recent : return only the most recent results in the response * popular : return only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         Returns tweets with an tweet ID less than (that is, older than) or equal to the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         Returns tweets with an tweet ID greater than (that is, more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         Specifies the period of time (in seconds) to poll tweets periodically \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.0-SNAPSHOT\n\n\nSource\n\n\ntwitter \n(Source)\n\n\nThe twitter source receives the events from a twitter App. \n\n\n\nSyntax\n\n\n@source(type=\ntwitter\n, consumer.key=\nSTRING\n, consumer.secret=\nSTRING\n, access.token=\nSTRING\n, access.token.secret=\nSTRING\n, mode=\nSTRING\n, filter.level=\nSTRING\n, track=\nSTRING\n, follow=\nLONG\n, location=\nDOUBLE\n, language=\nSTRING\n, query=\nSTRING\n, count=\nSTRING\n, geocode=\nSTRING\n, result.type=\nSTRING\n, max.id=\nLONG\n, since.id=\nLONG\n, until=\nSTRING\n, polling.interval=\nLONG\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nconsumer.key\n\n        \nConsumer key is the API key to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconsumer.secret\n\n        \nConsumer secret is the API secret to access created twitter app\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token\n\n        \nAccess token is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \naccess.token.secret\n\n        \nAccess token secret is used to make API requests on behalf of your account.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThere are two possible values for mode. \n1. Streaming - Retrieves real time tweets, \n2. TwitterPoller - Retrieves historical tweets within one week.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfilter.level\n\n        \nFilters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the \u201ctop tweets\u201d filter the service already offers in its on-site search function. Values will be one of either none, low, or medium.\n\n        \nnone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrack\n\n        \nFilters the tweets that include the given keywords.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow\n\n        \nFilters the tweets that is tweeted by the given user ids\n\n        \nnull\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlocation\n\n        \nFilters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970\n\n        \nnull\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlanguage\n\n        \nFilters tweets in the given language, given by an ISO 639-1 code.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nquery\n\n        \nFilters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators. \nFor example : '@NASA' - mentioning Twitter account 'NASA'.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncount\n\n        \nReturns specified number of tweets per page, up to a maximum of 100.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ngeocode\n\n        \nReturns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either \u201d mi \u201d (miles) or \u201d km \u201d (kilometers).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nresult.type\n\n        \nReturns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:\n mixed : Include both popular and recent results in the response.\n recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.)\n\n        \nmixed\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.id\n\n        \nReturns tweets with an tweet ID less than (that is, older than) or equal to the specified ID\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsince.id\n\n        \nReturns tweets with an tweet ID greater than (that is, more recent than) the specified ID.\n\n        \n-1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuntil\n\n        \nReturns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nSpecifies the period of time (in seconds) to poll tweets periodically\n\n        \n3600\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 2\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 3\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 4\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 5\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.\n\n\n\nEXAMPLE 6\n\n\n@source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);\n\n\n\n\nUnder this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v100-snapshot", 
            "text": "", 
            "title": "API Docs - v1.0.0-SNAPSHOT"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#twitter-source", 
            "text": "The twitter source receives the events from a twitter App.   Syntax  @source(type= twitter , consumer.key= STRING , consumer.secret= STRING , access.token= STRING , access.token.secret= STRING , mode= STRING , filter.level= STRING , track= STRING , follow= LONG , location= DOUBLE , language= STRING , query= STRING , count= STRING , geocode= STRING , result.type= STRING , max.id= LONG , since.id= LONG , until= STRING , polling.interval= LONG , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         consumer.key \n         Consumer key is the API key to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         consumer.secret \n         Consumer secret is the API secret to access created twitter app \n         \n         STRING \n         No \n         No \n     \n     \n         access.token \n         Access token is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         access.token.secret \n         Access token secret is used to make API requests on behalf of your account. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         There are two possible values for mode.  1. Streaming - Retrieves real time tweets,  2. TwitterPoller - Retrieves historical tweets within one week. \n         \n         STRING \n         No \n         No \n     \n     \n         filter.level \n         Filters tweets by the level of engagement based on the  filter.level. The highest level(medium) corresponds loosely to the \u201ctop tweets\u201d filter the service already offers in its on-site search function. Values will be one of either none, low, or medium. \n         none \n         STRING \n         Yes \n         No \n     \n     \n         track \n         Filters the tweets that include the given keywords. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow \n         Filters the tweets that is tweeted by the given user ids \n         null \n         LONG \n         Yes \n         No \n     \n     \n         location \n         Filters tweets based on the locations. Here, We have to specify latitude and the longitude of the location. For Example : 51.683979:0.278970 \n         null \n         DOUBLE \n         Yes \n         No \n     \n     \n         language \n         Filters tweets in the given language, given by an ISO 639-1 code. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         query \n         Filters tweets that matches the given Query, UTF-8, URL-encoded search query of 500 characters maximum, including operators.  For example : '@NASA' - mentioning Twitter account 'NASA'. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         count \n         Returns specified number of tweets per page, up to a maximum of 100. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         geocode \n         Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by latitude,longitude,radius, where radius units must be specified as either \u201d mi \u201d (miles) or \u201d km \u201d (kilometers). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         result.type \n         Returns tweets based on what type of results you would prefer to receive. The current default is 'mixed'. Valid values include:  mixed : Include both popular and recent results in the response.  recent : return only the most recent results in the response * popular : return only the most popular results in the response.) \n         mixed \n         STRING \n         Yes \n         No \n     \n     \n         max.id \n         Returns tweets with an tweet ID less than (that is, older than) or equal to the specified ID \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         since.id \n         Returns tweets with an tweet ID greater than (that is, more recent than) the specified ID. \n         -1 \n         LONG \n         Yes \n         No \n     \n     \n         until \n         Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Search index has a 7-day limit. So no tweets will be found for a date older than one week. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         Specifies the period of time (in seconds) to poll tweets periodically \n         3600 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', @map(type='json', fail.on.missing.attribute='false', attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening on random sample of public statuses and they are passed to the rcvEvents stream.  EXAMPLE 2  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google or apple and they are passed to the rcvEvents stream.  EXAMPLE 3  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'streaming', track = 'Amazon,Google,Apple', language = 'en', follow = '11348282,20536157,15670515,17193794,58561993,18139619',filter.level = 'low', location = '51.280430:-0.563160,51.683979:0.278970', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts listening tweets in English that containing the keywords Amazon,google,apple or tweeted by the given followers or tweeted from the given location based on the filter.level. and they are passed to the rcvEvents stream.  EXAMPLE 4  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = 'happy hour', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets containing the exact phrase 'happy hour' and they are passed to the rcvEvents stream.  EXAMPLE 5  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '#Amazon', since.id = '973439483906420736', @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling tweets, containing the hashtag '#Amazon' and tweet Id is greater than since.id and they are passed to the rcvEvents stream.  EXAMPLE 6  @source(type='twitter', consumer.key='consumer.key',consumer.secret='consumerSecret', access.token='accessToken',access.token.secret='accessTokenSecret', mode= 'polling', query = '@NASA', language = 'en', result.type = 'recent', geocode = '43.913723261972855,-72.54272478125,150km', since.id = 24012619984051000, max.id = 250126199840518145, until = 2018-03-10,  @map(type='json', fail.on.missing.attribute='false' , attributes(created_at = 'created_at', id = 'id' ,id_str = 'id_str', text = 'text')))\ndefine stream rcvEvents(created_at String, id long, id_str String, text String);  Under this configuration, it starts polling recent tweets in english that is  having tweet id greater than since.id and less than max.id, mentioning NASA  and they are passed to the rcvEvents stream.", 
            "title": "twitter (Source)"
        }, 
        {
            "location": "/license/", 
            "text": "", 
            "title": "License"
        }
    ]
}